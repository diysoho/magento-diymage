<?php
// {{license}}
?>
<div class="diy control builder">
    <input type="hidden" name="<?php echo $this->getFieldName() ?>" id="<?php echo $this->getFieldId() ?>" value='<?php echo $this->getValue() ?>' />
    <?php if (!$this->isCMSPage()): ?>
        <label>Builder</label>
    <?php endif ?>
    <span id="builder_canvas"></span>
</div>

<script type="text/javascript" charset="utf-8">
    <!-- Layout builder for handle: <?php echo $this->getCurrentHandle() ?> -->

    // This is the layout of the builder that we're getting from the block
    var references = {
        "left": <?php echo $this->getLayoutReferenceJson('left') ?>,
        "right": <?php echo $this->getLayoutReferenceJson('right') ?>,
        "content": <?php echo $this->getLayoutReferenceJson('content') ?>
    };
    
    // This is the json object containing the layout updates that we have previously saved
    // for this page.
    var updates = extractPresetLayoutUpdates();
    var static_blocks = <?php echo $this->getStaticBlocks() ?>;
    var name_map = <?php echo $this->getBlocksNiceNameMap() ?>;

    Event.observe(window, 'load', function () {        
        // When the document loads, build our builder on the right hand side of the page
        updateLayoutBuilder();

        // Every time we change the layout of the page, update the builder layout
        getLayoutElement().observe('change', function (e) {
            updateLayoutBuilder();
        });
    });
    
    // Return the dropdown list containing the currently selected page layout
    function getLayoutElement() {
        if ($('layout')) {
            // DIY Mage page
            return $('layout');
        } else {
            // CMS Page new/edit
            return $('page_root_template');
        }
    }
    
    // Update layout builder extracts the data we need to pass to drawLayoutBuilder()
    // which actually performs the rendering of the builder control.  The argument we'll
    // pass will be an array of objects, the objects have two properties, "key" and "label".
    // The key is the unique name identifying the section, and label is the descriptive name.
    function updateLayoutBuilder() {
        var configuration = [];
        
        var layout = getLayoutElement().value;
        var desc = "";
        
        if ((layout.match(/2/) || layout.match(/two/)) && layout.match(/left/)) {
            configuration.push(
                {
                    key: "left",
                    label: "Left Column"
                },
                {
                    key: "content",
                    label: "Main"
                }
            );
            desc = "col2-left";
        } else if ((layout.match(/2/) || layout.match(/two/)) && layout.match(/right/)) {
            configuration.push(
                {
                    key: "content",
                    label: "Main"
                },
                {
                    key: "right",
                    label: "Right Column"
                }
            );
            desc = "col2-right";
        } else if (layout.match(/3/) || layout.match(/three/)) {
            configuration.push(
                {
                    key: "left",
                    label: "Left Column"
                },
                {
                    key: "content",
                    label: "Main"
                },
                {
                    key: "right",
                    label: "Right Column"
                }
            );
            desc = "col3";
        } else if (layout.match(/1/) || layout.match(/one/)) {
            configuration.push(
                {
                    key: "content",
                    label: "Main"
                }
            );
            desc = "col1";
        }
        
        drawLayoutBuilder(configuration, desc);
    }
    
    // This function actually builds the HTML elements that make up the control, using the
    // configuration passed from updateLayoutBuilder(), and renders the control on the page.
    function drawLayoutBuilder(configuration, desc) {
        var container = $j('#builder_canvas');
        var html = "";
        
        // Reset the content so we can append later
        container.html('');

        // Add the class name
        container.removeClass();
        container.addClass(desc);
        
        for ( var i = 0; i < configuration.length; i++ ) {
            var html = "";
            var container_id = "<?php echo $this->getFieldId() ?>_" + i;
            var refs = [];
            var reference = references[configuration[i].key];
                    
            html += "<div class='container' id='" + container_id + "'>";
                html += "<b>" + configuration[i].label + "</b>";
                html += "<ul class='container_canvas' id='container_" + configuration[i].key + "'>";
                
                    for ( var j = 0; j < reference.length; j++ ) {
                        if (reference[j] == undefined) continue;
                        
                        var is_static_block = !(reference[j].static == undefined);
                        
                        if (is_static_block) {
                            html += drawStaticBlock(references[configuration[i].key][j].static, references[configuration[i].key][j].id, configuration[i].key);
                        } else {
                            html += drawLayoutBlock(references[configuration[i].key][j].name, configuration[i].key);
                        }
                    }
                
                html += "</ul>";
                
                html += drawStaticBlockAddControl(configuration[i].key);
            
            html += "</div>";
            container.append(html);
            
            // Build the input value once, just so we know it's in the correct format.
            buildLayoutUpdate(configuration[i].key);
            
            // Once we let go of the element, and have an updated structure, then we fire
            // of a command to update the hidden element.
            $j("#container_" + configuration[i].key).sortable({
                stop: function(e, ui) {
                    var ref = ui.item[0].getAttribute('reference');
                    buildLayoutUpdate(ref);
                }
            });
            
            // When a user double clicks on an element, we fire off a command to update the hidden
            // element, and we add a visual indicator that the block has been deleted through the
            // css class.
            $j("#container_" + configuration[i].key + " .block").bind("dblclick", function (e) {
                $j(this).toggleClass("deleted");
                buildLayoutUpdate(this.getAttribute('reference'));
            });
        }
    }
    
    // This function draws the individual block blocks within the control
    var block_id = 0;
    function drawLayoutBlock(name, reference) {
        var html = "";
        var css_class = "";
        var key = name;
        
        if (updates[reference] && updates[reference].remove != null && $j.inArray(name, updates[reference].remove) != -1) {
            css_class = "deleted";
        }
        
        if (name_map[name]) {
            name = name_map[name];
        }
        
        // We add the reference so we know what the layout click event is for, and we can compile the update code.
        html += "<li class='block layout " + css_class + "' reference='" + reference + "' block_name='" + key + "' id='block_" + ++block_id + "'>";
            html += name;
        html += "</li>";
        
        return html;
    }
    
    // This function updates the hidden input field with a stringified JSON object
    // that represents the state of the builder control.
    function buildLayoutUpdate(section) {
        var new_update = {"remove": [], "sort_order": []};
        
        // Didn't use remove = .map() as I wasn't getting a proper result.
        $j("#container_" + section + " .block.deleted").each(function() {
            new_update.remove.push(this.getAttribute("block_name"));
        });

        var previous_block = "-";
        $j("#container_" + section + " .block").each(function () {
            
            if (!$j(this).hasClass("deleted")) {
                
                if ($j(this).hasClass("layout")) {
                    new_update.sort_order.push({
                        "name": this.getAttribute("block_name"),
                        "after": previous_block
                    });
                } else {
                    new_update.sort_order.push({
                        "name": this.getAttribute("block_name"),
                        "static": this.getAttribute("static_name"),
                        "after": previous_block
                    });
                }
                
                // Update the last block's before block..
                var sort_order_length = new_update.sort_order.length;
                if (sort_order_length > 1) {
                    new_update.sort_order[sort_order_length - 2].before = this.getAttribute("block_name");
                }
            
                previous_block = this.getAttribute("block_name");
            }
        });
        
        var new_object = $j.parseJSON($j("#<?php echo $this->getFieldId() ?>").val());
        
        if (!new_object || new_object == null) {
            new_object = {};
        }
        
        new_object[section] = new_update;

        $j("#<?php echo $this->getFieldId() ?>").val(JSON.stringify(new_object));
    }
    
    // This function gets around the problem that we appear to have where the
    // stringified object does not encode arrays properly, but keeps them as 
    // strings which is useless.
    function extractPresetLayoutUpdates() {
        var object = $j.parseJSON($j("#<?php echo $this->getFieldId() ?>").val());
        
        if (!object) {
            object = {};
        }
        
        // Ensure that our arrays are converted into actual arrays, not kept as strings
        for (var area in object) {
            for (var key in object[area]) {
                var value = object[area][key];
                if (typeof(value) == "string" && value.substr(0, 1) == "[") {
                    object[area][key] = $j.parseJSON(value);
                }
            }
        }

        return object;
    }
    
    function drawStaticBlockAddControl(section) {
        var select_id = "static_block_add_" + section;
        var html = "<div class='static_block_add'><select id='" + select_id +  "'>";
        
        for (var name in static_blocks) {
            var label = static_blocks[name];
            html += "<option value='" + name + "'>" + label + "</option>";
        }
        
        html += "</select>";
        
        html += "<button onclick='addStaticBlock(\"" + select_id + "\", \"" + section + "\"); return false'>Add</button>";
        
        html += "</div>";
        
        return html;
    }
    
    function addStaticBlock(select_id, section) {
        var block_name = $j("#" + select_id).val();
        references[section].push({
            "name": static_blocks[block_name],
            "id": ++block_id,
            "static": block_name
        });
        
        updateLayoutBuilder();
    }
    
    var static_block_ids = {};
    function drawStaticBlock(block_name, id, section) {
        var html = "";
        var css_class = "";
        
        if (updates[section] && updates[section].remove != null && $j.inArray(name, updates[section].remove) != -1) {
            css_class = "deleted";
        }
        
        if (!static_block_ids[name]) {
            static_block_ids[name] = 0;
        }
        
        static_block_ids[name]++;
        
        var static_block_id = "static_block_" + static_block_ids[name]++;
        
        // We add the reference so we know what the layout click event is for, and we can compile the update code.
        html += "<li class='block static " + css_class + "' reference='" + section + "' static_name='" + block_name + "' block_name='" + static_block_id + "' id='block_" + ++block_id + "'>";
            html += static_blocks[block_name];
        html += "</li>";
        
        return html;
    }
</script>
